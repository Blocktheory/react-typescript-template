{"ast":null,"code":"export function transformSnippetCall(_a) {\n  var methodName = _a[0],\n      args = _a.slice(1);\n\n  return {\n    method: methodName,\n    resolve: function () {},\n    reject: console.error,\n    args: args,\n    called: false\n  };\n}\n\nvar normalizeSnippetBuffer = function (buffer) {\n  return buffer.map(transformSnippetCall);\n};\n/**\n * Fetch the buffered method calls from the window object and normalize them.\n * This removes existing buffered calls from the window object.\n */\n\n\nexport var popSnippetWindowBuffer = function () {\n  var wa = window.analytics;\n  if (!Array.isArray(wa)) return [];\n  var buffered = wa.splice(0, wa.length);\n  return normalizeSnippetBuffer(buffered);\n};","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/core/buffer/snippet.ts"],"names":[],"mappings":"AAMA,OAAM,SAAU,oBAAV,CAA+B,EAA/B,EAG4B;MAFhC,UAAU,GAAA,EAAA,CAAA,CAAA,C;MACP,IAAI,GAAA,EAAA,CAAA,KAAA,CAAA,CAAA,C;;AAEP,SAAO;AACL,IAAA,MAAM,EAAE,UADH;AAEL,IAAA,OAAO,EAAE,YAAA,CAAQ,CAFZ;AAGL,IAAA,MAAM,EAAE,OAAO,CAAC,KAHX;AAIL,IAAA,IAAI,EAAA,IAJC;AAKL,IAAA,MAAM,EAAE;AALH,GAAP;AAOD;;AAED,IAAM,sBAAsB,GAAG,UAAC,MAAD,EAAsB;AACnD,SAAO,MAAM,CAAC,GAAP,CAAW,oBAAX,CAAP;AACD,CAFD;AAcA;;;AAGG;;;AACH,OAAO,IAAM,sBAAsB,GAAG,YAAA;AACpC,MAAM,EAAE,GAAG,MAAM,CAAC,SAAlB;AACA,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,EAAd,CAAL,EAAwB,OAAO,EAAP;AACxB,MAAM,QAAQ,GAAG,EAAE,CAAC,MAAH,CAAU,CAAV,EAAa,EAAE,CAAC,MAAhB,CAAjB;AACA,SAAO,sBAAsB,CAAC,QAAD,CAA7B;AACD,CALM","sourcesContent":["import type {\n  PreInitMethodCall,\n  PreInitMethodName,\n  PreInitMethodParams,\n} from '.'\n\nexport function transformSnippetCall([\n  methodName,\n  ...args\n]: SnippetWindowBufferedMethodCall): PreInitMethodCall {\n  return {\n    method: methodName,\n    resolve: () => {},\n    reject: console.error,\n    args,\n    called: false,\n  }\n}\n\nconst normalizeSnippetBuffer = (buffer: SnippetBuffer): PreInitMethodCall[] => {\n  return buffer.map(transformSnippetCall)\n}\n\ntype SnippetWindowBufferedMethodCall<\n  MethodName extends PreInitMethodName = PreInitMethodName\n> = [MethodName, ...PreInitMethodParams<MethodName>]\n\n/**\n * A list of the method calls before initialization for snippet users\n * For example, [[\"track\", \"foo\", {bar: 123}], [\"page\"], [\"on\", \"ready\", function(){..}]\n */\ntype SnippetBuffer = SnippetWindowBufferedMethodCall[]\n\n/**\n * Fetch the buffered method calls from the window object and normalize them.\n * This removes existing buffered calls from the window object.\n */\nexport const popSnippetWindowBuffer = (): PreInitMethodCall[] => {\n  const wa = window.analytics\n  if (!Array.isArray(wa)) return []\n  const buffered = wa.splice(0, wa.length)\n  return normalizeSnippetBuffer(buffered)\n}\n"]},"metadata":{},"sourceType":"module"}