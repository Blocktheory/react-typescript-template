{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetch from 'unfetch';\nimport { version } from '../../generated/version';\nimport { getVersionType } from '../../plugins/segmentio/normalize';\n\nfunction logError(err) {\n  console.error('Error sending segment performance metrics', err);\n}\n\nvar RemoteMetrics =\n/** @class */\nfunction () {\n  function RemoteMetrics(options) {\n    var _this = this;\n\n    var _a, _b, _c, _d;\n\n    this.host = (_a = options === null || options === void 0 ? void 0 : options.host) !== null && _a !== void 0 ? _a : 'api.segment.io/v1';\n    this.sampleRate = (_b = options === null || options === void 0 ? void 0 : options.sampleRate) !== null && _b !== void 0 ? _b : 1;\n    this.flushTimer = (_c = options === null || options === void 0 ? void 0 : options.flushTimer) !== null && _c !== void 0 ? _c : 30 * 1000;\n    /* 30s */\n\n    this.maxQueueSize = (_d = options === null || options === void 0 ? void 0 : options.maxQueueSize) !== null && _d !== void 0 ? _d : 20;\n    this.queue = [];\n\n    if (this.sampleRate > 0) {\n      var flushing_1 = false;\n\n      var run_1 = function () {\n        if (flushing_1) {\n          return;\n        }\n\n        flushing_1 = true;\n\n        _this.flush().catch(logError);\n\n        flushing_1 = false;\n        setTimeout(run_1, _this.flushTimer);\n      };\n\n      run_1();\n    }\n  }\n\n  RemoteMetrics.prototype.increment = function (metric, tags) {\n    // All metrics are part of an allow list in Tracking API\n    if (!metric.includes('analytics_js.')) {\n      return;\n    } // /m doesn't like empty tags\n\n\n    if (tags.length === 0) {\n      return;\n    }\n\n    if (Math.random() > this.sampleRate) {\n      return;\n    }\n\n    if (this.queue.length >= this.maxQueueSize) {\n      return;\n    }\n\n    var formatted = tags.reduce(function (acc, t) {\n      var _a = t.split(':'),\n          k = _a[0],\n          v = _a[1];\n\n      acc[k] = v;\n      return acc;\n    }, {});\n    formatted['library'] = 'analytics.js';\n    var type = getVersionType();\n\n    if (type === 'web') {\n      formatted['library_version'] = \"next-\".concat(version);\n    } else {\n      formatted['library_version'] = \"npm:next-\".concat(version);\n    }\n\n    this.queue.push({\n      type: 'Counter',\n      metric: metric,\n      value: 1,\n      tags: formatted\n    });\n\n    if (metric.includes('error')) {\n      this.flush().catch(logError);\n    }\n  };\n\n  RemoteMetrics.prototype.flush = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.queue.length <= 0) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , this.send().catch(function (error) {\n              logError(error);\n              _this.sampleRate = 0;\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RemoteMetrics.prototype.send = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, headers, url;\n      return __generator(this, function (_a) {\n        payload = {\n          series: this.queue\n        };\n        this.queue = [];\n        headers = {\n          'Content-Type': 'text/plain'\n        };\n        url = \"https://\".concat(this.host, \"/m\");\n        return [2\n        /*return*/\n        , fetch(url, {\n          headers: headers,\n          body: JSON.stringify(payload),\n          method: 'POST'\n        })];\n      });\n    });\n  };\n\n  return RemoteMetrics;\n}();\n\nexport { RemoteMetrics };","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/core/stats/remote-metrics.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch from 'unfetch'\nimport { version } from '../../generated/version'\nimport { getVersionType } from '../../plugins/segmentio/normalize'\n\nexport interface MetricsOptions {\n  host?: string\n  sampleRate?: number\n  flushTimer?: number\n  maxQueueSize?: number\n}\n\ntype Metric = { type: 'Counter'; metric: string; value: number; tags: object }\n\nfunction logError(err: unknown): void {\n  console.error('Error sending segment performance metrics', err)\n}\n\nexport class RemoteMetrics {\n  private host: string\n  private flushTimer: number\n  private maxQueueSize: number\n\n  sampleRate: number\n  queue: Metric[]\n\n  constructor(options?: MetricsOptions) {\n    this.host = options?.host ?? 'api.segment.io/v1'\n    this.sampleRate = options?.sampleRate ?? 1\n    this.flushTimer = options?.flushTimer ?? 30 * 1000 /* 30s */\n    this.maxQueueSize = options?.maxQueueSize ?? 20\n\n    this.queue = []\n\n    if (this.sampleRate > 0) {\n      let flushing = false\n\n      const run = (): void => {\n        if (flushing) {\n          return\n        }\n\n        flushing = true\n        this.flush().catch(logError)\n\n        flushing = false\n\n        setTimeout(run, this.flushTimer)\n      }\n      run()\n    }\n  }\n\n  increment(metric: string, tags: string[]): void {\n    // All metrics are part of an allow list in Tracking API\n    if (!metric.includes('analytics_js.')) {\n      return\n    }\n\n    // /m doesn't like empty tags\n    if (tags.length === 0) {\n      return\n    }\n\n    if (Math.random() > this.sampleRate) {\n      return\n    }\n\n    if (this.queue.length >= this.maxQueueSize) {\n      return\n    }\n\n    const formatted = tags.reduce((acc, t) => {\n      const [k, v] = t.split(':')\n      acc[k] = v\n      return acc\n    }, {} as Record<string, string>)\n\n    formatted['library'] = 'analytics.js'\n\n    const type = getVersionType()\n    if (type === 'web') {\n      formatted['library_version'] = `next-${version}`\n    } else {\n      formatted['library_version'] = `npm:next-${version}`\n    }\n\n    this.queue.push({\n      type: 'Counter',\n      metric,\n      value: 1,\n      tags: formatted,\n    })\n\n    if (metric.includes('error')) {\n      this.flush().catch(logError)\n    }\n  }\n\n  async flush(): Promise<void> {\n    if (this.queue.length <= 0) {\n      return\n    }\n\n    await this.send().catch((error) => {\n      logError(error)\n      this.sampleRate = 0\n    })\n  }\n\n  private async send(): Promise<Response> {\n    const payload = { series: this.queue }\n    this.queue = []\n\n    const headers = { 'Content-Type': 'text/plain' }\n    const url = `https://${this.host}/m`\n\n    return fetch(url, {\n      headers,\n      body: JSON.stringify(payload),\n      method: 'POST',\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}