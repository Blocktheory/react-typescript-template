{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar FLOAT64_SMALLEST_NORMAL = require('@stdlib/constants-float64-smallest-normal');\n\nvar isInfinite = require('@stdlib/math-base-assert-is-infinite');\n\nvar isnan = require('@stdlib/math-base-assert-is-nan');\n\nvar abs = require('@stdlib/math-base-special-abs'); // VARIABLES //\n// (1<<52)\n\n\nvar SCALAR = 4503599627370496; // MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( [ 0.0, 0 ], 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], 0.0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], Infinity );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], -Infinity );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], NaN );\n* // returns [ NaN, 0 ]\n*/\n\nfunction normalize(out, x) {\n  if (isnan(x) || isInfinite(x)) {\n    out[0] = x;\n    out[1] = 0;\n    return out;\n  }\n\n  if (x !== 0.0 && abs(x) < FLOAT64_SMALLEST_NORMAL) {\n    out[0] = x * SCALAR;\n    out[1] = -52;\n    return out;\n  }\n\n  out[0] = x;\n  out[1] = 0;\n  return out;\n} // EXPORTS //\n\n\nmodule.exports = normalize;","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@stdlib/number-float64-base-normalize/lib/normalize.js"],"names":["FLOAT64_SMALLEST_NORMAL","require","isInfinite","isnan","abs","SCALAR","normalize","out","x","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAE,2CAAF,CAArC;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAE,sCAAF,CAAxB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAE,iCAAF,CAAnB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAE,+BAAF,CAAjB,C,CAGA;AAEA;;;AACA,IAAII,MAAM,GAAG,gBAAb,C,CAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAoBC,GAApB,EAAyBC,CAAzB,EAA6B;AAC5B,MAAKL,KAAK,CAAEK,CAAF,CAAL,IAAcN,UAAU,CAAEM,CAAF,CAA7B,EAAqC;AACpCD,IAAAA,GAAG,CAAE,CAAF,CAAH,GAAWC,CAAX;AACAD,IAAAA,GAAG,CAAE,CAAF,CAAH,GAAW,CAAX;AACA,WAAOA,GAAP;AACA;;AACD,MAAKC,CAAC,KAAK,GAAN,IAAaJ,GAAG,CAAEI,CAAF,CAAH,GAAWR,uBAA7B,EAAuD;AACtDO,IAAAA,GAAG,CAAE,CAAF,CAAH,GAAWC,CAAC,GAAGH,MAAf;AACAE,IAAAA,GAAG,CAAE,CAAF,CAAH,GAAW,CAAC,EAAZ;AACA,WAAOA,GAAP;AACA;;AACDA,EAAAA,GAAG,CAAE,CAAF,CAAH,GAAWC,CAAX;AACAD,EAAAA,GAAG,CAAE,CAAF,CAAH,GAAW,CAAX;AACA,SAAOA,GAAP;AACA,C,CAGD;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAjB","sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( [ 0.0, 0 ], 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], 0.0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], Infinity );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], -Infinity );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( out, x ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ 0 ] = x * SCALAR;\n\t\tout[ 1 ] = -52;\n\t\treturn out;\n\t}\n\tout[ 0 ] = x;\n\tout[ 1 ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n"]},"metadata":{},"sourceType":"script"}