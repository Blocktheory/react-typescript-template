{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isOffline } from '../../core/connection';\nimport { PriorityQueue } from '../../lib/priority-queue';\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted';\nimport { toFacade } from '../../lib/to-facade';\nimport batch from './batched-dispatcher';\nimport standard from './fetch-dispatcher';\nimport { normalize } from './normalize';\nimport { scheduleFlush } from './schedule-flush';\n\nfunction onAlias(analytics, json) {\n  var _a, _b, _c, _d;\n\n  var user = analytics.user();\n  json.previousId = (_c = (_b = (_a = json.previousId) !== null && _a !== void 0 ? _a : json.from) !== null && _b !== void 0 ? _b : user.id()) !== null && _c !== void 0 ? _c : user.anonymousId();\n  json.userId = (_d = json.userId) !== null && _d !== void 0 ? _d : json.to;\n  delete json.from;\n  delete json.to;\n  return json;\n}\n\nexport function segmentio(analytics, settings, integrations) {\n  var _a, _b, _c, _d;\n\n  var buffer = analytics.options.disableClientPersistence ? new PriorityQueue(analytics.queue.queue.maxAttempts, []) : new PersistedPriorityQueue(analytics.queue.queue.maxAttempts, \"dest-Segment.io\");\n  var flushing = false;\n  var apiHost = (_a = settings === null || settings === void 0 ? void 0 : settings.apiHost) !== null && _a !== void 0 ? _a : 'api.segment.io/v1';\n  var protocol = (_b = settings === null || settings === void 0 ? void 0 : settings.protocol) !== null && _b !== void 0 ? _b : 'https';\n  var remote = \"\".concat(protocol, \"://\").concat(apiHost);\n  var client = ((_c = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy) === null || _c === void 0 ? void 0 : _c.strategy) === 'batching' ? batch(apiHost, (_d = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy) === null || _d === void 0 ? void 0 : _d.config) : standard();\n\n  function send(ctx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, json;\n      return __generator(this, function (_a) {\n        if (isOffline()) {\n          buffer.push(ctx); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n          scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n          return [2\n          /*return*/\n          , ctx];\n        }\n\n        path = ctx.event.type.charAt(0);\n        json = toFacade(ctx.event).json();\n\n        if (ctx.event.type === 'track') {\n          delete json.traits;\n        }\n\n        if (ctx.event.type === 'alias') {\n          json = onAlias(analytics, json);\n        }\n\n        return [2\n        /*return*/\n        , client.dispatch(\"\".concat(remote, \"/\").concat(path), normalize(analytics, json, settings, integrations)).then(function () {\n          return ctx;\n        }).catch(function (err) {\n          if (err.type === 'error' || err.message === 'Failed to fetch') {\n            buffer.push(ctx); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n            scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n          }\n\n          return ctx;\n        })];\n      });\n    });\n  }\n\n  var segmentio = {\n    name: 'Segment.io',\n    type: 'after',\n    version: '0.1.0',\n    isLoaded: function () {\n      return true;\n    },\n    load: function () {\n      return Promise.resolve();\n    },\n    track: send,\n    identify: send,\n    page: send,\n    alias: send,\n    group: send\n  };\n  return segmentio;\n}","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/plugins/segmentio/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Facade } from '@segment/facade'\nimport { Analytics } from '../../core/analytics'\nimport { LegacySettings } from '../../browser'\nimport { isOffline } from '../../core/connection'\nimport { Context } from '../../core/context'\nimport { Plugin } from '../../core/plugin'\nimport { PriorityQueue } from '../../lib/priority-queue'\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted'\nimport { toFacade } from '../../lib/to-facade'\nimport batch from './batched-dispatcher'\nimport standard from './fetch-dispatcher'\nimport { normalize } from './normalize'\nimport { scheduleFlush } from './schedule-flush'\n\nexport type SegmentioSettings = {\n  apiKey: string\n  apiHost?: string\n  protocol?: 'http' | 'https'\n\n  addBundledMetadata?: boolean\n  unbundledIntegrations?: string[]\n  bundledConfigIds?: string[]\n  unbundledConfigIds?: string[]\n\n  maybeBundledConfigIds?: Record<string, string[]>\n\n  deliveryStrategy?: {\n    strategy?: 'standard' | 'batching'\n    config?: {\n      size?: number\n      timeout?: number\n    }\n  }\n}\n\ntype JSON = ReturnType<Facade['json']>\n\nfunction onAlias(analytics: Analytics, json: JSON): JSON {\n  const user = analytics.user()\n  json.previousId =\n    json.previousId ?? json.from ?? user.id() ?? user.anonymousId()\n  json.userId = json.userId ?? json.to\n  delete json.from\n  delete json.to\n  return json\n}\n\nexport function segmentio(\n  analytics: Analytics,\n  settings?: SegmentioSettings,\n  integrations?: LegacySettings['integrations']\n): Plugin {\n  const buffer = analytics.options.disableClientPersistence\n    ? new PriorityQueue<Context>(analytics.queue.queue.maxAttempts, [])\n    : new PersistedPriorityQueue(\n        analytics.queue.queue.maxAttempts,\n        `dest-Segment.io`\n      )\n  const flushing = false\n\n  const apiHost = settings?.apiHost ?? 'api.segment.io/v1'\n  const protocol = settings?.protocol ?? 'https'\n  const remote = `${protocol}://${apiHost}`\n\n  const client =\n    settings?.deliveryStrategy?.strategy === 'batching'\n      ? batch(apiHost, settings?.deliveryStrategy?.config)\n      : standard()\n\n  async function send(ctx: Context): Promise<Context> {\n    if (isOffline()) {\n      buffer.push(ctx)\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      scheduleFlush(flushing, buffer, segmentio, scheduleFlush)\n      return ctx\n    }\n\n    const path = ctx.event.type.charAt(0)\n    let json = toFacade(ctx.event).json()\n\n    if (ctx.event.type === 'track') {\n      delete json.traits\n    }\n\n    if (ctx.event.type === 'alias') {\n      json = onAlias(analytics, json)\n    }\n\n    return client\n      .dispatch(\n        `${remote}/${path}`,\n        normalize(analytics, json, settings, integrations)\n      )\n      .then(() => ctx)\n      .catch((err) => {\n        if (err.type === 'error' || err.message === 'Failed to fetch') {\n          buffer.push(ctx)\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          scheduleFlush(flushing, buffer, segmentio, scheduleFlush)\n        }\n        return ctx\n      })\n  }\n\n  const segmentio: Plugin = {\n    name: 'Segment.io',\n    type: 'after',\n    version: '0.1.0',\n    isLoaded: (): boolean => true,\n    load: (): Promise<void> => Promise.resolve(),\n    track: send,\n    identify: send,\n    page: send,\n    alias: send,\n    group: send,\n  }\n\n  return segmentio\n}\n"]},"metadata":{},"sourceType":"module"}