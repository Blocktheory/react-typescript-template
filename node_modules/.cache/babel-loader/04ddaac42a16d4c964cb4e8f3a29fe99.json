{"ast":null,"code":"import cookie from 'js-cookie';\n/**\n * Levels returns all levels of the given url.\n *\n * @param {string} url\n * @return {Array}\n * @api public\n */\n\nfunction levels(url) {\n  var host = url.hostname;\n  var parts = host.split('.');\n  var last = parts[parts.length - 1];\n  var levels = []; // Ip address.\n\n  if (parts.length === 4 && parseInt(last, 10) > 0) {\n    return levels;\n  } // Localhost.\n\n\n  if (parts.length <= 1) {\n    return levels;\n  } // Create levels.\n\n\n  for (var i = parts.length - 2; i >= 0; --i) {\n    levels.push(parts.slice(i).join('.'));\n  }\n\n  return levels;\n}\n\nfunction parseUrl(url) {\n  try {\n    return new URL(url);\n  } catch (_a) {\n    return;\n  }\n}\n\nexport function tld(url) {\n  var parsedUrl = parseUrl(url);\n  if (!parsedUrl) return;\n  var lvls = levels(parsedUrl); // Lookup the real top level one.\n\n  for (var i = 0; i < lvls.length; ++i) {\n    var cname = '__tld__';\n    var domain = lvls[i];\n    var opts = {\n      domain: '.' + domain\n    };\n\n    try {\n      // cookie access throw an error if the library is ran inside a sandboxed environment (e.g. sandboxed iframe)\n      cookie.set(cname, '1', opts);\n\n      if (cookie.get(cname)) {\n        cookie.remove(cname, opts);\n        return domain;\n      }\n    } catch (_) {\n      return;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/core/user/tld.ts"],"names":[],"mappings":"AAAA,OAAO,MAAP,MAAmB,WAAnB;AAEA;;;;;;AAMG;;AACH,SAAS,MAAT,CAAgB,GAAhB,EAAwB;AACtB,MAAM,IAAI,GAAG,GAAG,CAAC,QAAjB;AACA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAd;AACA,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAlB;AACA,MAAM,MAAM,GAAa,EAAzB,CAJsB,CAMtB;;AACA,MAAI,KAAK,CAAC,MAAN,KAAiB,CAAjB,IAAsB,QAAQ,CAAC,IAAD,EAAO,EAAP,CAAR,GAAqB,CAA/C,EAAkD;AAChD,WAAO,MAAP;AACD,GATqB,CAWtB;;;AACA,MAAI,KAAK,CAAC,MAAN,IAAgB,CAApB,EAAuB;AACrB,WAAO,MAAP;AACD,GAdqB,CAgBtB;;;AACA,OAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAN,GAAe,CAA5B,EAA+B,CAAC,IAAI,CAApC,EAAuC,EAAE,CAAzC,EAA4C;AAC1C,IAAA,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,IAAf,CAAoB,GAApB,CAAZ;AACD;;AAED,SAAO,MAAP;AACD;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAA6B;AAC3B,MAAI;AACF,WAAO,IAAI,GAAJ,CAAQ,GAAR,CAAP;AACD,GAFD,CAEE,OAAA,EAAA,EAAM;AACN;AACD;AACF;;AAED,OAAM,SAAU,GAAV,CAAc,GAAd,EAAyB;AAC7B,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAD,CAA1B;AACA,MAAI,CAAC,SAAL,EAAgB;AAEhB,MAAM,IAAI,GAAG,MAAM,CAAC,SAAD,CAAnB,CAJ6B,CAM7B;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,EAAE,CAAnC,EAAsC;AACpC,QAAM,KAAK,GAAG,SAAd;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,CAAD,CAAnB;AACA,QAAM,IAAI,GAAG;AAAE,MAAA,MAAM,EAAE,MAAM;AAAhB,KAAb;;AAEA,QAAI;AACF;AACA,MAAA,MAAM,CAAC,GAAP,CAAW,KAAX,EAAkB,GAAlB,EAAuB,IAAvB;;AACA,UAAI,MAAM,CAAC,GAAP,CAAW,KAAX,CAAJ,EAAuB;AACrB,QAAA,MAAM,CAAC,MAAP,CAAc,KAAd,EAAqB,IAArB;AACA,eAAO,MAAP;AACD;AACF,KAPD,CAOE,OAAO,CAAP,EAAU;AACV;AACD;AACF;AACF","sourcesContent":["import cookie from 'js-cookie'\n\n/**\n * Levels returns all levels of the given url.\n *\n * @param {string} url\n * @return {Array}\n * @api public\n */\nfunction levels(url: URL): string[] {\n  const host = url.hostname\n  const parts = host.split('.')\n  const last = parts[parts.length - 1]\n  const levels: string[] = []\n\n  // Ip address.\n  if (parts.length === 4 && parseInt(last, 10) > 0) {\n    return levels\n  }\n\n  // Localhost.\n  if (parts.length <= 1) {\n    return levels\n  }\n\n  // Create levels.\n  for (let i = parts.length - 2; i >= 0; --i) {\n    levels.push(parts.slice(i).join('.'))\n  }\n\n  return levels\n}\n\nfunction parseUrl(url: string): URL | undefined {\n  try {\n    return new URL(url)\n  } catch {\n    return\n  }\n}\n\nexport function tld(url: string): string | undefined {\n  const parsedUrl = parseUrl(url)\n  if (!parsedUrl) return\n\n  const lvls = levels(parsedUrl)\n\n  // Lookup the real top level one.\n  for (let i = 0; i < lvls.length; ++i) {\n    const cname = '__tld__'\n    const domain = lvls[i]\n    const opts = { domain: '.' + domain }\n\n    try {\n      // cookie access throw an error if the library is ran inside a sandboxed environment (e.g. sandboxed iframe)\n      cookie.set(cname, '1', opts)\n      if (cookie.get(cname)) {\n        cookie.remove(cname, opts)\n        return domain\n      }\n    } catch (_) {\n      return\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}