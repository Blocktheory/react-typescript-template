{"ast":null,"code":"import * as tsub from '@segment/tsub';\nexport var tsubMiddleware = function (rules) {\n  return function (_a) {\n    var payload = _a.payload,\n        integration = _a.integration,\n        next = _a.next;\n    var store = new tsub.Store(rules);\n    var rulesToApply = store.getRulesByDestinationName(integration);\n    rulesToApply.forEach(function (rule) {\n      var matchers = rule.matchers,\n          transformers = rule.transformers;\n\n      for (var i = 0; i < matchers.length; i++) {\n        if (tsub.matches(payload.obj, matchers[i])) {\n          payload.obj = tsub.transform(payload.obj, transformers[i]);\n\n          if (payload.obj === null) {\n            return next(null);\n          }\n        }\n      }\n    });\n    next(payload);\n  };\n};","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/plugins/routing-middleware/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAZ,MAAsB,eAAtB;AAMA,OAAO,IAAM,cAAc,GACzB,UAAC,KAAD,EAAqB;AACrB,SAAA,UAAC,EAAD,EAA+B;QAA5B,OAAO,GAAA,EAAA,CAAA,O;QAAE,WAAW,GAAA,EAAA,CAAA,W;QAAE,IAAI,GAAA,EAAA,CAAA,I;AAC3B,QAAM,KAAK,GAAG,IAAI,IAAI,CAAC,KAAT,CAAe,KAAf,CAAd;AACA,QAAM,YAAY,GAAG,KAAK,CAAC,yBAAN,CAAgC,WAAhC,CAArB;AAEA,IAAA,YAAY,CAAC,OAAb,CAAqB,UAAC,IAAD,EAAK;AAChB,UAAA,QAAQ,GAAmB,IAAI,CAAvB,QAAR;AAAA,UAAU,YAAY,GAAK,IAAI,CAAT,YAAtB;;AAER,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,YAAI,IAAI,CAAC,OAAL,CAAa,OAAO,CAAC,GAArB,EAA0B,QAAQ,CAAC,CAAD,CAAlC,CAAJ,EAA4C;AAC1C,UAAA,OAAO,CAAC,GAAR,GAAc,IAAI,CAAC,SAAL,CAAe,OAAO,CAAC,GAAvB,EAA4B,YAAY,CAAC,CAAD,CAAxC,CAAd;;AAEA,cAAI,OAAO,CAAC,GAAR,KAAgB,IAApB,EAA0B;AACxB,mBAAO,IAAI,CAAC,IAAD,CAAX;AACD;AACF;AACF;AACF,KAZD;AAcA,IAAA,IAAI,CAAC,OAAD,CAAJ;AACD,GAnBD;AAmBC,CArBI","sourcesContent":["import * as tsub from '@segment/tsub'\nimport { Rule } from '@segment/tsub/dist/store'\nimport { DestinationMiddlewareFunction } from '../middleware'\n\nexport type RoutingRule = Rule\n\nexport const tsubMiddleware =\n  (rules: RoutingRule[]): DestinationMiddlewareFunction =>\n  ({ payload, integration, next }): void => {\n    const store = new tsub.Store(rules)\n    const rulesToApply = store.getRulesByDestinationName(integration)\n\n    rulesToApply.forEach((rule) => {\n      const { matchers, transformers } = rule\n\n      for (let i = 0; i < matchers.length; i++) {\n        if (tsub.matches(payload.obj, matchers[i])) {\n          payload.obj = tsub.transform(payload.obj, transformers[i])\n\n          if (payload.obj === null) {\n            return next(null)\n          }\n        }\n      }\n    })\n\n    next(payload)\n  }\n"]},"metadata":{},"sourceType":"module"}