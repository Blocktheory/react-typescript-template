{"ast":null,"code":"function findScript(src) {\n  var scripts = Array.prototype.slice.call(window.document.querySelectorAll('script'));\n  return scripts.find(function (s) {\n    return s.src === src;\n  });\n}\n\nexport function loadScript(src, attributes) {\n  var found = findScript(src);\n\n  if (found !== undefined) {\n    var status_1 = found === null || found === void 0 ? void 0 : found.getAttribute('status');\n\n    if (status_1 === 'loaded') {\n      return Promise.resolve(found);\n    }\n\n    if (status_1 === 'loading') {\n      return new Promise(function (resolve, reject) {\n        found.addEventListener('load', function () {\n          return resolve(found);\n        });\n        found.addEventListener('error', function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }\n\n  return new Promise(function (resolve, reject) {\n    var _a;\n\n    var script = window.document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = src;\n    script.async = true;\n    script.setAttribute('status', 'loading');\n\n    for (var _i = 0, _b = Object.entries(attributes !== null && attributes !== void 0 ? attributes : {}); _i < _b.length; _i++) {\n      var _c = _b[_i],\n          k = _c[0],\n          v = _c[1];\n      script.setAttribute(k, v);\n    }\n\n    script.onload = function () {\n      script.onerror = script.onload = null;\n      script.setAttribute('status', 'loaded');\n      resolve(script);\n    };\n\n    script.onerror = function () {\n      script.onerror = script.onload = null;\n      script.setAttribute('status', 'error');\n      reject(new Error(\"Failed to load \".concat(src)));\n    };\n\n    var tag = window.document.getElementsByTagName('script')[0];\n    (_a = tag.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(script, tag);\n  });\n}\nexport function unloadScript(src) {\n  var found = findScript(src);\n\n  if (found !== undefined) {\n    found.remove();\n  }\n\n  return Promise.resolve();\n}","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/lib/load-script.ts"],"names":[],"mappings":"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","sourcesContent":["function findScript(src: string): HTMLScriptElement | undefined {\n  const scripts = Array.prototype.slice.call(\n    window.document.querySelectorAll('script')\n  )\n  return scripts.find((s) => s.src === src)\n}\n\nexport function loadScript(\n  src: string,\n  attributes?: Record<string, string>\n): Promise<HTMLScriptElement> {\n  const found = findScript(src)\n\n  if (found !== undefined) {\n    const status = found?.getAttribute('status')\n\n    if (status === 'loaded') {\n      return Promise.resolve(found)\n    }\n\n    if (status === 'loading') {\n      return new Promise((resolve, reject) => {\n        found.addEventListener('load', () => resolve(found))\n        found.addEventListener('error', (err) => reject(err))\n      })\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    const script = window.document.createElement('script')\n\n    script.type = 'text/javascript'\n    script.src = src\n    script.async = true\n\n    script.setAttribute('status', 'loading')\n    for (const [k, v] of Object.entries(attributes ?? {})) {\n      script.setAttribute(k, v)\n    }\n\n    script.onload = (): void => {\n      script.onerror = script.onload = null\n      script.setAttribute('status', 'loaded')\n      resolve(script)\n    }\n\n    script.onerror = (): void => {\n      script.onerror = script.onload = null\n      script.setAttribute('status', 'error')\n      reject(new Error(`Failed to load ${src}`))\n    }\n\n    const tag = window.document.getElementsByTagName('script')[0]\n    tag.parentElement?.insertBefore(script, tag)\n  })\n}\n\nexport function unloadScript(src: string): Promise<void> {\n  const found = findScript(src)\n\n  if (found !== undefined) {\n    found.remove()\n  }\n\n  return Promise.resolve()\n}\n"]},"metadata":{},"sourceType":"module"}