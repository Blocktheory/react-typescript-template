{"ast":null,"code":"import { __assign } from \"tslib\";\n\nvar compactMetricType = function (type) {\n  var enums = {\n    gauge: 'g',\n    counter: 'c'\n  };\n  return enums[type];\n};\n\nvar Stats =\n/** @class */\nfunction () {\n  function Stats(remoteMetrics) {\n    this.metrics = [];\n    this.remoteMetrics = remoteMetrics;\n  }\n\n  Stats.prototype.increment = function (metric, by, tags) {\n    var _a;\n\n    if (by === void 0) {\n      by = 1;\n    }\n\n    this.metrics.push({\n      metric: metric,\n      value: by,\n      tags: tags !== null && tags !== void 0 ? tags : [],\n      type: 'counter',\n      timestamp: Date.now()\n    });\n    (_a = this.remoteMetrics) === null || _a === void 0 ? void 0 : _a.increment(metric, tags !== null && tags !== void 0 ? tags : []);\n  };\n\n  Stats.prototype.gauge = function (metric, value, tags) {\n    this.metrics.push({\n      metric: metric,\n      value: value,\n      tags: tags !== null && tags !== void 0 ? tags : [],\n      type: 'gauge',\n      timestamp: Date.now()\n    });\n  };\n\n  Stats.prototype.flush = function () {\n    var formatted = this.metrics.map(function (m) {\n      return __assign(__assign({}, m), {\n        tags: m.tags.join(',')\n      });\n    }); // ie doesn't like console.table\n\n    if (console.table) {\n      console.table(formatted);\n    } else {\n      console.log(formatted);\n    }\n\n    this.metrics = [];\n  };\n  /**\n   * compact keys for smaller payload\n   */\n\n\n  Stats.prototype.serialize = function () {\n    return this.metrics.map(function (m) {\n      return {\n        m: m.metric,\n        v: m.value,\n        t: m.tags,\n        k: compactMetricType(m.type),\n        e: m.timestamp\n      };\n    });\n  };\n\n  return Stats;\n}();\n\nexport default Stats;","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/core/stats/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { RemoteMetrics } from './remote-metrics'\n\ntype MetricType = 'gauge' | 'counter'\ntype CompactMetricType = 'g' | 'c'\n\nexport interface Metric {\n  metric: string\n  value: number\n  type: MetricType\n  tags: string[]\n  timestamp: number // unit milliseconds\n}\n\nexport interface CompactMetric {\n  m: string // metric name\n  v: number // value\n  k: CompactMetricType\n  t: string[] // tags\n  e: number // timestamp in unit milliseconds\n}\n\nconst compactMetricType = (type: MetricType): CompactMetricType => {\n  const enums: Record<MetricType, CompactMetricType> = {\n    gauge: 'g',\n    counter: 'c',\n  }\n  return enums[type]\n}\n\nexport default class Stats {\n  metrics: Metric[] = []\n\n  private remoteMetrics?: RemoteMetrics\n\n  constructor(remoteMetrics?: RemoteMetrics) {\n    this.remoteMetrics = remoteMetrics\n  }\n\n  increment(metric: string, by = 1, tags?: string[]): void {\n    this.metrics.push({\n      metric,\n      value: by,\n      tags: tags ?? [],\n      type: 'counter',\n      timestamp: Date.now(),\n    })\n\n    this.remoteMetrics?.increment(metric, tags ?? [])\n  }\n\n  gauge(metric: string, value: number, tags?: string[]): void {\n    this.metrics.push({\n      metric,\n      value,\n      tags: tags ?? [],\n      type: 'gauge',\n      timestamp: Date.now(),\n    })\n  }\n\n  flush(): void {\n    const formatted = this.metrics.map((m) => ({\n      ...m,\n      tags: m.tags.join(','),\n    }))\n    // ie doesn't like console.table\n    if (console.table) {\n      console.table(formatted)\n    } else {\n      console.log(formatted)\n    }\n    this.metrics = []\n  }\n\n  /**\n   * compact keys for smaller payload\n   */\n  serialize(): CompactMetric[] {\n    return this.metrics.map((m) => {\n      return {\n        m: m.metric,\n        v: m.value,\n        t: m.tags,\n        k: compactMetricType(m.type),\n        e: m.timestamp,\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}