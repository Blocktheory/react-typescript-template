{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Store =\n/** @class */\nfunction () {\n  function Store(rules) {\n    this.rules = [];\n    this.rules = rules || [];\n  }\n\n  Store.prototype.getRulesByDestinationName = function (destinationName) {\n    var rules = [];\n\n    for (var _i = 0, _a = this.rules; _i < _a.length; _i++) {\n      var rule = _a[_i]; // Rules with no destinationName are global (workspace || workspace::source)\n\n      if (rule.destinationName === destinationName || rule.destinationName === undefined) {\n        rules.push(rule);\n      }\n    }\n\n    return rules;\n  };\n\n  return Store;\n}();\n\nexports.default = Store;","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/tsub/src/store.ts"],"names":[],"mappings":";;;;;;AAoBA,IAAA,KAAA;AAAA;AAAA,YAAA;AAGE,WAAA,KAAA,CAAY,KAAZ,EAA0B;AAFT,SAAA,KAAA,GAAQ,EAAR;AAGf,SAAK,KAAL,GAAa,KAAK,IAAI,EAAtB;AACD;;AAEM,EAAA,KAAA,CAAA,SAAA,CAAA,yBAAA,GAAP,UAAiC,eAAjC,EAAwD;AACtD,QAAM,KAAK,GAAW,EAAtB;;AACA,SAAmB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,KAAxB,EAAmB,EAAA,GAAA,EAAA,CAAA,MAAnB,EAAmB,EAAA,EAAnB,EAA+B;AAA1B,UAAM,IAAI,GAAA,EAAA,CAAA,EAAA,CAAV,CAA0B,CAC7B;;AACA,UAAI,IAAI,CAAC,eAAL,KAAyB,eAAzB,IAA4C,IAAI,CAAC,eAAL,KAAyB,SAAzE,EAAoF;AAClF,QAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACD;AACF;;AAED,WAAO,KAAP;AACD,GAVM;;AAWT,SAAA,KAAA;AAAC,CAlBD,EAAA","sourcesContent":["import { TransformerConfig } from './transformers'\n\nexport interface Rule {\n  scope: string\n  target_type: string\n  matchers: Matcher[]\n  transformers: Transformer[][]\n  destinationName?: string\n}\n\nexport interface Matcher {\n  type: string\n  ir: string\n}\n\nexport interface Transformer {\n  type: string\n  config?: TransformerConfig\n}\n\nexport default class Store {\n  private readonly rules = []\n\n  constructor(rules?: Rule[]) {\n    this.rules = rules || []\n  }\n\n  public getRulesByDestinationName(destinationName: string): Rule[] {\n    const rules: Rule[] = []\n    for (const rule of this.rules) {\n      // Rules with no destinationName are global (workspace || workspace::source)\n      if (rule.destinationName === destinationName || rule.destinationName === undefined) {\n        rules.push(rule)\n      }\n    }\n\n    return rules\n  }\n}\n"]},"metadata":{},"sourceType":"script"}