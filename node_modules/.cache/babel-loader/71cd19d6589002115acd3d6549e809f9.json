{"ast":null,"code":"import { v4 as uuid } from '@lukeed/uuid';\nimport { dset } from 'dset';\nimport Logger from '../logger';\nimport Stats from '../stats';\nimport { RemoteMetrics } from '../stats/remote-metrics';\n\nvar ContextCancelation =\n/** @class */\nfunction () {\n  function ContextCancelation(options) {\n    var _a, _b, _c;\n\n    this.retry = (_a = options.retry) !== null && _a !== void 0 ? _a : true;\n    this.type = (_b = options.type) !== null && _b !== void 0 ? _b : 'plugin Error';\n    this.reason = (_c = options.reason) !== null && _c !== void 0 ? _c : '';\n  }\n\n  return ContextCancelation;\n}();\n\nexport { ContextCancelation };\nvar remoteMetrics;\n\nvar Context =\n/** @class */\nfunction () {\n  function Context(event, id) {\n    this.logger = new Logger();\n\n    this.cancel = function (error) {\n      if (error) {\n        throw error;\n      }\n\n      throw new ContextCancelation({\n        reason: 'Context Cancel'\n      });\n    };\n\n    this._attempts = 0;\n    this._event = event;\n    this._id = id !== null && id !== void 0 ? id : uuid();\n    this.stats = new Stats(remoteMetrics);\n  }\n\n  Context.initMetrics = function (options) {\n    remoteMetrics = new RemoteMetrics(options);\n  };\n\n  Context.system = function () {\n    return new Context({\n      type: 'track',\n      event: 'system'\n    });\n  };\n\n  Context.prototype.isSame = function (other) {\n    return other._id === this._id;\n  };\n\n  Context.prototype.log = function (level, message, extras) {\n    this.logger.log(level, message, extras);\n  };\n\n  Object.defineProperty(Context.prototype, \"id\", {\n    get: function () {\n      return this._id;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Context.prototype, \"event\", {\n    get: function () {\n      return this._event;\n    },\n    set: function (evt) {\n      this._event = evt;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Context.prototype, \"attempts\", {\n    get: function () {\n      return this._attempts;\n    },\n    set: function (attempts) {\n      this._attempts = attempts;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Context.prototype.updateEvent = function (path, val) {\n    var _a; // Don't allow integrations that are set to false to be overwritten with integration settings.\n\n\n    if (path.split('.')[0] === 'integrations') {\n      var integrationName = path.split('.')[1];\n\n      if (((_a = this._event.integrations) === null || _a === void 0 ? void 0 : _a[integrationName]) === false) {\n        return this._event;\n      }\n    }\n\n    dset(this._event, path, val);\n    return this._event;\n  };\n\n  Context.prototype.failedDelivery = function () {\n    return this._failedDelivery;\n  };\n\n  Context.prototype.setFailedDelivery = function (options) {\n    this._failedDelivery = options;\n  };\n\n  Context.prototype.logs = function () {\n    return this.logger.logs;\n  };\n\n  Context.prototype.flush = function () {\n    this.logger.flush();\n    this.stats.flush();\n  };\n\n  Context.prototype.toJSON = function () {\n    return {\n      id: this._id,\n      event: this._event,\n      logs: this.logger.logs,\n      metrics: this.stats.metrics\n    };\n  };\n\n  return Context;\n}();\n\nexport { Context };","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/core/context/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 as uuid } from '@lukeed/uuid'\nimport { dset } from 'dset'\nimport { SegmentEvent } from '../events'\nimport Logger, { LogLevel, LogMessage } from '../logger'\nimport Stats, { Metric } from '../stats'\nimport { MetricsOptions, RemoteMetrics } from '../stats/remote-metrics'\n\nexport interface AbstractContext {\n  cancel: () => never\n  log: (level: LogLevel, message: string, extras?: object) => void\n  stats: Stats\n}\n\nexport interface SerializedContext {\n  id: string\n  event: SegmentEvent\n  logs: LogMessage[]\n  metrics: Metric[]\n}\n\ninterface CancelationOptions {\n  retry?: boolean\n  reason?: string\n  type?: string\n}\n\nexport interface ContextFailedDelivery {\n  reason: unknown\n}\n\nexport class ContextCancelation {\n  retry: boolean\n  type: string\n  reason?: string\n\n  constructor(options: CancelationOptions) {\n    this.retry = options.retry ?? true\n    this.type = options.type ?? 'plugin Error'\n    this.reason = options.reason ?? ''\n  }\n}\n\nlet remoteMetrics: RemoteMetrics | undefined\n\nexport class Context implements AbstractContext {\n  private _event: SegmentEvent\n  private _attempts: number\n  public logger = new Logger()\n  public stats: Stats\n  private _id: string\n  private _failedDelivery?: ContextFailedDelivery\n\n  constructor(event: SegmentEvent, id?: string) {\n    this._attempts = 0\n    this._event = event\n    this._id = id ?? uuid()\n    this.stats = new Stats(remoteMetrics)\n  }\n\n  static initMetrics(options?: MetricsOptions): void {\n    remoteMetrics = new RemoteMetrics(options)\n  }\n\n  static system(): Context {\n    return new Context({ type: 'track', event: 'system' })\n  }\n\n  isSame(other: Context): boolean {\n    return other._id === this._id\n  }\n\n  cancel = (error?: Error | ContextCancelation): never => {\n    if (error) {\n      throw error\n    }\n\n    throw new ContextCancelation({ reason: 'Context Cancel' })\n  }\n\n  log(level: LogLevel, message: string, extras?: object): void {\n    this.logger.log(level, message, extras)\n  }\n\n  public get id(): string {\n    return this._id\n  }\n\n  public get event(): SegmentEvent {\n    return this._event\n  }\n\n  public set event(evt: SegmentEvent) {\n    this._event = evt\n  }\n\n  public get attempts(): number {\n    return this._attempts\n  }\n\n  public set attempts(attempts: number) {\n    this._attempts = attempts\n  }\n\n  public updateEvent(path: string, val: unknown): SegmentEvent {\n    // Don't allow integrations that are set to false to be overwritten with integration settings.\n    if (path.split('.')[0] === 'integrations') {\n      const integrationName = path.split('.')[1]\n\n      if (this._event.integrations?.[integrationName] === false) {\n        return this._event\n      }\n    }\n\n    dset(this._event, path, val)\n    return this._event\n  }\n\n  public failedDelivery(): ContextFailedDelivery | undefined {\n    return this._failedDelivery\n  }\n\n  public setFailedDelivery(options: ContextFailedDelivery) {\n    this._failedDelivery = options\n  }\n\n  public logs(): LogMessage[] {\n    return this.logger.logs\n  }\n\n  public flush(): void {\n    this.logger.flush()\n    this.stats.flush()\n  }\n\n  toJSON(): SerializedContext {\n    return {\n      id: this._id,\n      event: this._event,\n      logs: this.logger.logs,\n      metrics: this.stats.metrics,\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}