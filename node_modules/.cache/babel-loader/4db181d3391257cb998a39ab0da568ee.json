{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { asPromise } from '../../lib/as-promise';\nimport { loadScript } from '../../lib/load-script';\nimport { getCDN } from '../../lib/parse-cdn';\n\nfunction validate(pluginLike) {\n  if (!Array.isArray(pluginLike)) {\n    throw new Error('Not a valid list of plugins');\n  }\n\n  var required = ['load', 'isLoaded', 'name', 'version', 'type'];\n  pluginLike.forEach(function (plugin) {\n    required.forEach(function (method) {\n      var _a;\n\n      if (plugin[method] === undefined) {\n        throw new Error(\"Plugin: \".concat((_a = plugin.name) !== null && _a !== void 0 ? _a : 'unknown', \" missing required function \").concat(method));\n      }\n    });\n  });\n  return true;\n}\n\nexport function remoteLoader(settings, userIntegrations, mergedIntegrations, obfuscate) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function () {\n    var allPlugins, cdn, pluginPromises;\n\n    var _this = this;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          allPlugins = [];\n          cdn = getCDN();\n          pluginPromises = ((_a = settings.remotePlugins) !== null && _a !== void 0 ? _a : []).map(function (remotePlugin) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var urlSplit, name_1, obfuscatedURL, error_1, libraryName, pluginFactory, plugin, plugins, error_2;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (userIntegrations.All === false && !userIntegrations[remotePlugin.name] || userIntegrations[remotePlugin.name] === false) return [2\n                    /*return*/\n                    ];\n                    _a.label = 1;\n\n                  case 1:\n                    _a.trys.push([1, 12,, 13]);\n\n                    if (!obfuscate) return [3\n                    /*break*/\n                    , 7];\n                    urlSplit = remotePlugin.url.split('/');\n                    name_1 = urlSplit[urlSplit.length - 2];\n                    obfuscatedURL = remotePlugin.url.replace(name_1, btoa(name_1).replace(/=/g, ''));\n                    _a.label = 2;\n\n                  case 2:\n                    _a.trys.push([2, 4,, 6]);\n\n                    return [4\n                    /*yield*/\n                    , loadScript(obfuscatedURL.replace('https://cdn.segment.com', cdn))];\n\n                  case 3:\n                    _a.sent();\n\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 4:\n                    error_1 = _a.sent(); // Due to syncing concerns it is possible that the obfuscated action destination (or requested version) might not exist.\n                    // We should use the unobfuscated version as a fallback.\n\n                    return [4\n                    /*yield*/\n                    , loadScript(remotePlugin.url.replace('https://cdn.segment.com', cdn))];\n\n                  case 5:\n                    // Due to syncing concerns it is possible that the obfuscated action destination (or requested version) might not exist.\n                    // We should use the unobfuscated version as a fallback.\n                    _a.sent();\n\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 6:\n                    return [3\n                    /*break*/\n                    , 9];\n\n                  case 7:\n                    return [4\n                    /*yield*/\n                    , loadScript(remotePlugin.url.replace('https://cdn.segment.com', cdn))];\n\n                  case 8:\n                    _a.sent();\n\n                    _a.label = 9;\n\n                  case 9:\n                    libraryName = remotePlugin.libraryName;\n                    if (!(typeof window[libraryName] === 'function')) return [3\n                    /*break*/\n                    , 11];\n                    pluginFactory = window[libraryName];\n                    return [4\n                    /*yield*/\n                    , asPromise(pluginFactory(__assign(__assign({}, remotePlugin.settings), mergedIntegrations[remotePlugin.name])))];\n\n                  case 10:\n                    plugin = _a.sent();\n                    plugins = Array.isArray(plugin) ? plugin : [plugin];\n                    validate(plugins);\n                    allPlugins.push.apply(allPlugins, plugins);\n                    _a.label = 11;\n\n                  case 11:\n                    return [3\n                    /*break*/\n                    , 13];\n\n                  case 12:\n                    error_2 = _a.sent();\n                    console.warn('Failed to load Remote Plugin', error_2);\n                    return [3\n                    /*break*/\n                    , 13];\n\n                  case 13:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          });\n          return [4\n          /*yield*/\n          , Promise.all(pluginPromises)];\n\n        case 1:\n          _b.sent();\n\n          return [2\n          /*return*/\n          , allPlugins.filter(Boolean)];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/plugins/remote-loader/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Integrations } from '../../core/events/interfaces'\nimport { LegacySettings } from '../../browser'\nimport { JSONObject, JSONValue } from '../../core/events'\nimport { Plugin } from '../../core/plugin'\nimport { asPromise } from '../../lib/as-promise'\nimport { loadScript } from '../../lib/load-script'\nimport { getCDN } from '../../lib/parse-cdn'\n\nexport interface RemotePlugin {\n  /** The name of the remote plugin */\n  name: string\n  /** The url of the javascript file to load */\n  url: string\n  /** The UMD/global name the plugin uses. Plugins are expected to exist here with the `PluginFactory` method signature */\n  libraryName: string\n  /** The settings related to this plugin. */\n  settings: JSONObject\n}\n\ntype PluginFactory = (\n  settings: JSONValue\n) => Plugin | Plugin[] | Promise<Plugin | Plugin[]>\n\nfunction validate(pluginLike: unknown): pluginLike is Plugin[] {\n  if (!Array.isArray(pluginLike)) {\n    throw new Error('Not a valid list of plugins')\n  }\n\n  const required = ['load', 'isLoaded', 'name', 'version', 'type']\n  pluginLike.forEach((plugin) => {\n    required.forEach((method) => {\n      if (plugin[method] === undefined) {\n        throw new Error(\n          `Plugin: ${\n            plugin.name ?? 'unknown'\n          } missing required function ${method}`\n        )\n      }\n    })\n  })\n\n  return true\n}\n\nexport async function remoteLoader(\n  settings: LegacySettings,\n  userIntegrations: Integrations,\n  mergedIntegrations: Record<string, JSONObject>,\n  obfuscate?: boolean\n): Promise<Plugin[]> {\n  const allPlugins: Plugin[] = []\n  const cdn = getCDN()\n\n  const pluginPromises = (settings.remotePlugins ?? []).map(\n    async (remotePlugin) => {\n      if (\n        (userIntegrations.All === false &&\n          !userIntegrations[remotePlugin.name]) ||\n        userIntegrations[remotePlugin.name] === false\n      )\n        return\n      try {\n        if (obfuscate) {\n          const urlSplit = remotePlugin.url.split('/')\n          const name = urlSplit[urlSplit.length - 2]\n          const obfuscatedURL = remotePlugin.url.replace(\n            name,\n            btoa(name).replace(/=/g, '')\n          )\n          try {\n            await loadScript(\n              obfuscatedURL.replace('https://cdn.segment.com', cdn)\n            )\n          } catch (error) {\n            // Due to syncing concerns it is possible that the obfuscated action destination (or requested version) might not exist.\n            // We should use the unobfuscated version as a fallback.\n            await loadScript(\n              remotePlugin.url.replace('https://cdn.segment.com', cdn)\n            )\n          }\n        } else {\n          await loadScript(\n            remotePlugin.url.replace('https://cdn.segment.com', cdn)\n          )\n        }\n\n        const libraryName = remotePlugin.libraryName\n\n        // @ts-expect-error\n        if (typeof window[libraryName] === 'function') {\n          // @ts-expect-error\n          const pluginFactory = window[libraryName] as PluginFactory\n          const plugin = await asPromise(\n            pluginFactory({\n              ...remotePlugin.settings,\n              ...mergedIntegrations[remotePlugin.name],\n            })\n          )\n          const plugins = Array.isArray(plugin) ? plugin : [plugin]\n\n          validate(plugins)\n\n          allPlugins.push(...plugins)\n        }\n      } catch (error) {\n        console.warn('Failed to load Remote Plugin', error)\n      }\n    }\n  )\n\n  await Promise.all(pluginPromises)\n  return allPlugins.filter(Boolean)\n}\n"]},"metadata":{},"sourceType":"module"}