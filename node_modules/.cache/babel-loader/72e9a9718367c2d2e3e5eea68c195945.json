{"ast":null,"code":"/**\n * Returns an object containing only the properties prefixed by the input\n * string.\n * Ex: prefix('ajs_traits_', { ajs_traits_address: '123 St' })\n * will return { address: '123 St' }\n **/\nexport function pickPrefix(prefix, object) {\n  return Object.keys(object).reduce(function (acc, key) {\n    if (key.startsWith(prefix)) {\n      var field = key.substr(prefix.length);\n      acc[field] = object[key];\n    }\n\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/core/query-string/pickPrefix.ts"],"names":[],"mappings":"AAEA;;;;;AAKI;AACJ,OAAM,SAAU,UAAV,CACJ,MADI,EAEJ,MAFI,EAEqB;AAEzB,SAAO,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,CAA2B,UAAC,GAAD,EAAyB,GAAzB,EAAoC;AACpE,QAAI,GAAG,CAAC,UAAJ,CAAe,MAAf,CAAJ,EAA4B;AAC1B,UAAM,KAAK,GAAG,GAAG,CAAC,MAAJ,CAAW,MAAM,CAAC,MAAlB,CAAd;AACA,MAAA,GAAG,CAAC,KAAD,CAAH,GAAa,MAAM,CAAC,GAAD,CAAnB;AACD;;AACD,WAAO,GAAP;AACD,GANM,EAMJ,EANI,CAAP;AAOD","sourcesContent":["import { QueryStringParams } from '.'\n\n/**\n * Returns an object containing only the properties prefixed by the input\n * string.\n * Ex: prefix('ajs_traits_', { ajs_traits_address: '123 St' })\n * will return { address: '123 St' }\n **/\nexport function pickPrefix(\n  prefix: string,\n  object: QueryStringParams\n): QueryStringParams {\n  return Object.keys(object).reduce((acc: QueryStringParams, key: string) => {\n    if (key.startsWith(prefix)) {\n      const field = key.substr(prefix.length)\n      acc[field] = object[key]!\n    }\n    return acc\n  }, {})\n}\n"]},"metadata":{},"sourceType":"module"}