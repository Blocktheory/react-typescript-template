{"ast":null,"code":"import { embeddedWriteKey } from './embedded-write-key';\nvar analyticsScriptRegex = /(https:\\/\\/.*)\\/analytics\\.js\\/v1\\/(?:.*?)\\/(?:platform|analytics.*)?/;\n\nvar getCDNUrlFromScriptTag = function () {\n  var cdn;\n  var scripts = Array.prototype.slice.call(document.querySelectorAll('script'));\n  scripts.forEach(function (s) {\n    var _a;\n\n    var src = (_a = s.getAttribute('src')) !== null && _a !== void 0 ? _a : '';\n    var result = analyticsScriptRegex.exec(src);\n\n    if (result && result[1]) {\n      cdn = result[1];\n    }\n  });\n  return cdn;\n};\n\nvar _globalCDN; // set globalCDN as in-memory singleton\n\n\nvar getGlobalCDNUrl = function () {\n  var _a;\n\n  var result = _globalCDN !== null && _globalCDN !== void 0 ? _globalCDN : (_a = window.analytics) === null || _a === void 0 ? void 0 : _a._cdn;\n  return result;\n};\n\nexport var setGlobalCDNUrl = function (cdn) {\n  if (window.analytics) {\n    window.analytics._cdn = cdn;\n  }\n\n  _globalCDN = cdn;\n};\nexport var getCDN = function () {\n  var globalCdnUrl = getGlobalCDNUrl();\n  if (globalCdnUrl) return globalCdnUrl;\n  var cdnFromScriptTag = getCDNUrlFromScriptTag();\n\n  if (cdnFromScriptTag) {\n    return cdnFromScriptTag;\n  } else {\n    // it's possible that the CDN is not found in the page because:\n    // - the script is loaded through a proxy\n    // - the script is removed after execution\n    // in this case, we fall back to the default Segment CDN\n    return \"https://cdn.segment.com\";\n  }\n};\nexport var getNextIntegrationsURL = function () {\n  var cdn = getCDN();\n  return \"\".concat(cdn, \"/next-integrations\");\n};\n/**\n * Replaces the CDN URL in the script tag with the one from Analytics.js 1.0\n *\n * @returns the path to Analytics JS 1.0\n **/\n\nexport function getLegacyAJSPath() {\n  var _a, _b;\n\n  var writeKey = (_a = embeddedWriteKey()) !== null && _a !== void 0 ? _a : window.analytics._writeKey;\n  var scripts = Array.prototype.slice.call(document.querySelectorAll('script'));\n  var path = undefined;\n\n  for (var _i = 0, scripts_1 = scripts; _i < scripts_1.length; _i++) {\n    var s = scripts_1[_i];\n    var src = (_b = s.getAttribute('src')) !== null && _b !== void 0 ? _b : '';\n    var result = analyticsScriptRegex.exec(src);\n\n    if (result && result[1]) {\n      path = src;\n      break;\n    }\n  }\n\n  if (path) {\n    return path.replace('analytics.min.js', 'analytics.classic.js');\n  }\n\n  return \"https://cdn.segment.com/analytics.js/v1/\".concat(writeKey, \"/analytics.classic.js\");\n}","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/lib/parse-cdn.ts"],"names":[],"mappings":"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","sourcesContent":["import { embeddedWriteKey } from './embedded-write-key'\n\nconst analyticsScriptRegex =\n  /(https:\\/\\/.*)\\/analytics\\.js\\/v1\\/(?:.*?)\\/(?:platform|analytics.*)?/\nconst getCDNUrlFromScriptTag = (): string | undefined => {\n  let cdn: string | undefined\n  const scripts = Array.prototype.slice.call(\n    document.querySelectorAll('script')\n  )\n  scripts.forEach((s) => {\n    const src = s.getAttribute('src') ?? ''\n    const result = analyticsScriptRegex.exec(src)\n\n    if (result && result[1]) {\n      cdn = result[1]\n    }\n  })\n  return cdn\n}\n\nlet _globalCDN: string | undefined // set globalCDN as in-memory singleton\nconst getGlobalCDNUrl = (): string | undefined => {\n  const result = _globalCDN ?? window.analytics?._cdn\n  return result\n}\n\nexport const setGlobalCDNUrl = (cdn: string) => {\n  if (window.analytics) {\n    window.analytics._cdn = cdn\n  }\n  _globalCDN = cdn\n}\n\nexport const getCDN = (): string => {\n  const globalCdnUrl = getGlobalCDNUrl()\n\n  if (globalCdnUrl) return globalCdnUrl\n\n  const cdnFromScriptTag = getCDNUrlFromScriptTag()\n\n  if (cdnFromScriptTag) {\n    return cdnFromScriptTag\n  } else {\n    // it's possible that the CDN is not found in the page because:\n    // - the script is loaded through a proxy\n    // - the script is removed after execution\n    // in this case, we fall back to the default Segment CDN\n    return `https://cdn.segment.com`\n  }\n}\n\nexport const getNextIntegrationsURL = () => {\n  const cdn = getCDN()\n  return `${cdn}/next-integrations`\n}\n\n/**\n * Replaces the CDN URL in the script tag with the one from Analytics.js 1.0\n *\n * @returns the path to Analytics JS 1.0\n **/\nexport function getLegacyAJSPath(): string {\n  const writeKey = embeddedWriteKey() ?? window.analytics._writeKey\n\n  const scripts = Array.prototype.slice.call(\n    document.querySelectorAll('script')\n  )\n  let path: string | undefined = undefined\n\n  for (const s of scripts) {\n    const src = s.getAttribute('src') ?? ''\n    const result = analyticsScriptRegex.exec(src)\n\n    if (result && result[1]) {\n      path = src\n      break\n    }\n  }\n\n  if (path) {\n    return path.replace('analytics.min.js', 'analytics.classic.js')\n  }\n\n  return `https://cdn.segment.com/analytics.js/v1/${writeKey}/analytics.classic.js`\n}\n"]},"metadata":{},"sourceType":"module"}