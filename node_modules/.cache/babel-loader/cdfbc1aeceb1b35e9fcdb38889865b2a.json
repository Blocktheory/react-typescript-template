{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isPlanEventEnabled } from '../../lib/is-plan-event-enabled';\n\nfunction disabledActionDestinations(plan, settings) {\n  var _a, _b;\n\n  if (!plan || !Object.keys(plan)) {\n    return {};\n  }\n\n  var disabledIntegrations = Object.keys(plan.integrations).filter(function (i) {\n    return plan.integrations[i] === false;\n  }); // This accounts for cases like Fullstory, where the settings.integrations\n  // contains a \"Fullstory\" object but settings.remotePlugins contains \"Fullstory (Actions)\"\n\n  var disabledRemotePlugins = [];\n  ((_a = settings.remotePlugins) !== null && _a !== void 0 ? _a : []).forEach(function (p) {\n    disabledIntegrations.forEach(function (int) {\n      if (p.name.includes(int) || int.includes(p.name)) {\n        disabledRemotePlugins.push(p.name);\n      }\n    });\n  });\n  return ((_b = settings.remotePlugins) !== null && _b !== void 0 ? _b : []).reduce(function (acc, p) {\n    if (p.settings['subscriptions']) {\n      if (disabledRemotePlugins.includes(p.name)) {\n        // @ts-expect-error element implicitly has an 'any' type because p.settings is a JSONObject\n        p.settings['subscriptions'].forEach( // @ts-expect-error parameter 'sub' implicitly has an 'any' type\n        function (sub) {\n          return acc[\"\".concat(p.name, \" \").concat(sub.partnerAction)] = false;\n        });\n      }\n    }\n\n    return acc;\n  }, {});\n}\n\nexport function schemaFilter(track, settings) {\n  function filter(ctx) {\n    var plan = track;\n    var ev = ctx.event.event;\n\n    if (plan && ev) {\n      var planEvent = plan[ev];\n\n      if (!isPlanEventEnabled(plan, planEvent)) {\n        ctx.updateEvent('integrations', __assign(__assign({}, ctx.event.integrations), {\n          All: false,\n          'Segment.io': true\n        }));\n        return ctx;\n      } else {\n        var disabledActions = disabledActionDestinations(planEvent, settings);\n        ctx.updateEvent('integrations', __assign(__assign(__assign({}, ctx.event.integrations), planEvent === null || planEvent === void 0 ? void 0 : planEvent.integrations), disabledActions));\n      }\n    }\n\n    return ctx;\n  }\n\n  return {\n    name: 'Schema Filter',\n    version: '0.1.0',\n    isLoaded: function () {\n      return true;\n    },\n    load: function () {\n      return Promise.resolve();\n    },\n    type: 'before',\n    page: filter,\n    alias: filter,\n    track: filter,\n    identify: filter,\n    group: filter\n  };\n}","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/plugins/schema-filter/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { LegacySettings } from '../../browser'\nimport { Context } from '../../core/context'\nimport { PlanEvent, TrackPlan } from '../../core/events/interfaces'\nimport { Plugin } from '../../core/plugin'\nimport { isPlanEventEnabled } from '../../lib/is-plan-event-enabled'\nimport { RemotePlugin } from '../remote-loader'\n\nfunction disabledActionDestinations(\n  plan: PlanEvent | undefined,\n  settings: LegacySettings\n): { [destination: string]: string[] } {\n  if (!plan || !Object.keys(plan)) {\n    return {}\n  }\n\n  const disabledIntegrations = Object.keys(plan.integrations).filter(\n    (i) => plan.integrations[i] === false\n  )\n\n  // This accounts for cases like Fullstory, where the settings.integrations\n  // contains a \"Fullstory\" object but settings.remotePlugins contains \"Fullstory (Actions)\"\n  const disabledRemotePlugins: string[] = []\n  ;(settings.remotePlugins ?? []).forEach((p: RemotePlugin) => {\n    disabledIntegrations.forEach((int) => {\n      if (p.name.includes(int) || int.includes(p.name)) {\n        disabledRemotePlugins.push(p.name)\n      }\n    })\n  })\n\n  return (settings.remotePlugins ?? []).reduce((acc, p) => {\n    if (p.settings['subscriptions']) {\n      if (disabledRemotePlugins.includes(p.name)) {\n        // @ts-expect-error element implicitly has an 'any' type because p.settings is a JSONObject\n        p.settings['subscriptions'].forEach(\n          // @ts-expect-error parameter 'sub' implicitly has an 'any' type\n          (sub) => (acc[`${p.name} ${sub.partnerAction}`] = false)\n        )\n      }\n    }\n    return acc\n  }, {})\n}\n\nexport function schemaFilter(\n  track: TrackPlan | undefined,\n  settings: LegacySettings\n): Plugin {\n  function filter(ctx: Context): Context {\n    const plan = track\n    const ev = ctx.event.event\n\n    if (plan && ev) {\n      const planEvent = plan[ev]\n      if (!isPlanEventEnabled(plan, planEvent)) {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          All: false,\n          'Segment.io': true,\n        })\n        return ctx\n      } else {\n        const disabledActions = disabledActionDestinations(planEvent, settings)\n\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          ...planEvent?.integrations,\n          ...disabledActions,\n        })\n      }\n    }\n\n    return ctx\n  }\n\n  return {\n    name: 'Schema Filter',\n    version: '0.1.0',\n    isLoaded: () => true,\n    load: () => Promise.resolve(),\n    type: 'before',\n    page: filter,\n    alias: filter,\n    track: filter,\n    identify: filter,\n    group: filter,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}