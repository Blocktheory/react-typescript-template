{"ast":null,"code":"import { __awaiter, __generator, __spreadArray } from \"tslib\";\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn';\nimport { loadScript, unloadScript } from '../../lib/load-script';\n\nfunction normalizeName(name) {\n  return name.toLowerCase().replace('.', '').replace(/\\s+/g, '-');\n}\n\nfunction obfuscatePathName(pathName, obfuscate) {\n  if (obfuscate === void 0) {\n    obfuscate = false;\n  }\n\n  return obfuscate ? btoa(pathName).replace(/=/g, '') : undefined;\n}\n\nfunction recordLoadMetrics(fullPath, ctx, name) {\n  var _a, _b;\n\n  try {\n    var metric = ((_b = (_a = window === null || window === void 0 ? void 0 : window.performance) === null || _a === void 0 ? void 0 : _a.getEntriesByName(fullPath, 'resource')) !== null && _b !== void 0 ? _b : [])[0]; // we assume everything that took under 100ms is cached\n\n    metric && ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), __spreadArray([name], metric.duration < 100 ? ['cached'] : [], true));\n  } catch (_) {// not available\n  }\n}\n\nexport function loadIntegration(ctx, analyticsInstance, name, version, settings, obfuscate) {\n  return __awaiter(this, void 0, void 0, function () {\n    var pathName, obfuscatedPathName, path, fullPath, err_1, deps, integrationBuilder, analyticsStub, integration;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          pathName = normalizeName(name);\n          obfuscatedPathName = obfuscatePathName(pathName, obfuscate);\n          path = getNextIntegrationsURL();\n          fullPath = \"\".concat(path, \"/integrations/\").concat(obfuscatedPathName !== null && obfuscatedPathName !== void 0 ? obfuscatedPathName : pathName, \"/\").concat(version, \"/\").concat(obfuscatedPathName !== null && obfuscatedPathName !== void 0 ? obfuscatedPathName : pathName, \".dynamic.js.gz\");\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , loadScript(fullPath)];\n\n        case 2:\n          _a.sent();\n\n          recordLoadMetrics(fullPath, ctx, name);\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          err_1 = _a.sent();\n          ctx.stats.gauge('legacy_destination_time', -1, [\"plugin:\".concat(name), \"failed\"]);\n          throw err_1;\n\n        case 4:\n          deps = window[\"\".concat(pathName, \"Deps\")];\n          return [4\n          /*yield*/\n          , Promise.all(deps.map(function (dep) {\n            return loadScript(path + dep + '.gz');\n          })) // @ts-ignore\n          ];\n\n        case 5:\n          _a.sent(); // @ts-ignore\n\n\n          window[\"\".concat(pathName, \"Loader\")]();\n          integrationBuilder = window[\"\".concat(pathName, \"Integration\")]; // GA and Appcues use a different interface to instantiating integrations\n\n          if (integrationBuilder.Integration) {\n            analyticsStub = {\n              user: function () {\n                return analyticsInstance.user();\n              },\n              addIntegration: function () {}\n            };\n            integrationBuilder(analyticsStub);\n            integrationBuilder = integrationBuilder.Integration;\n          }\n\n          integration = new integrationBuilder(settings);\n          integration.analytics = analyticsInstance;\n          return [2\n          /*return*/\n          , integration];\n      }\n    });\n  });\n}\nexport function unloadIntegration(name, version, obfuscate) {\n  return __awaiter(this, void 0, void 0, function () {\n    var path, pathName, obfuscatedPathName, fullPath;\n    return __generator(this, function (_a) {\n      path = getNextIntegrationsURL();\n      pathName = normalizeName(name);\n      obfuscatedPathName = obfuscatePathName(name, obfuscate);\n      fullPath = \"\".concat(path, \"/integrations/\").concat(obfuscatedPathName !== null && obfuscatedPathName !== void 0 ? obfuscatedPathName : pathName, \"/\").concat(version, \"/\").concat(obfuscatedPathName !== null && obfuscatedPathName !== void 0 ? obfuscatedPathName : pathName, \".dynamic.js.gz\");\n      return [2\n      /*return*/\n      , unloadScript(fullPath)];\n    });\n  });\n}\nexport function resolveVersion(settings) {\n  var _a, _b, _c, _d;\n\n  return (_d = (_b = (_a = settings.versionSettings) === null || _a === void 0 ? void 0 : _a.override) !== null && _b !== void 0 ? _b : (_c = settings.versionSettings) === null || _c === void 0 ? void 0 : _c.version) !== null && _d !== void 0 ? _d : 'latest';\n}","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/plugins/ajs-destination/loader.ts"],"names":[],"mappings":";AAEA,SAAS,sBAAT,QAAuC,qBAAvC;AAGA,SAAS,UAAT,EAAqB,YAArB,QAAyC,uBAAzC;;AAGA,SAAS,aAAT,CAAuB,IAAvB,EAAmC;AACjC,SAAO,IAAI,CAAC,WAAL,GAAmB,OAAnB,CAA2B,GAA3B,EAAgC,EAAhC,EAAoC,OAApC,CAA4C,MAA5C,EAAoD,GAApD,CAAP;AACD;;AAED,SAAS,iBAAT,CAA2B,QAA3B,EAA6C,SAA7C,EAA8D;AAAjB,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,KAAA;AAAiB;;AAC5D,SAAO,SAAS,GAAG,IAAI,CAAC,QAAD,CAAJ,CAAe,OAAf,CAAuB,IAAvB,EAA6B,EAA7B,CAAH,GAAsC,SAAtD;AACD;;AAED,SAAS,iBAAT,CAA2B,QAA3B,EAA6C,GAA7C,EAA2D,IAA3D,EAAuE;;;AACrE,MAAI;AACK,QAAA,MAAM,GACX,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,WAAR,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,gBAAF,CAAmB,QAAnB,EAA6B,UAA7B,CAAnB,MAA2D,IAA3D,IAA2D,EAAA,KAAA,KAAA,CAA3D,GAA2D,EAA3D,GAA+D,EAA/D,EADW,CACX,CADK,CADL,CAGF;;AACA,IAAA,MAAM,IACJ,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAgB,yBAAhB,EAA2C,IAAI,CAAC,KAAL,CAAW,MAAM,CAAC,QAAlB,CAA3C,EAAsE,aAAA,CAAA,CACpE,IADoE,CAAA,EAEhE,MAAM,CAAC,QAAP,GAAkB,GAAlB,GAAwB,CAAC,QAAD,CAAxB,GAAqC,EAF2B,EAExB,IAFwB,CAAtE,CADF;AAKD,GATD,CASE,OAAO,CAAP,EAAU,CACV;AACD;AACF;;AAED,OAAM,SAAgB,eAAhB,CACJ,GADI,EAEJ,iBAFI,EAGJ,IAHI,EAIJ,OAJI,EAKJ,QALI,EAMJ,SANI,EAMe;;;;;;AAEb,UAAA,QAAQ,GAAG,aAAa,CAAC,IAAD,CAAxB;AACA,UAAA,kBAAkB,GAAG,iBAAiB,CAAC,QAAD,EAAW,SAAX,CAAtC;AACA,UAAA,IAAI,GAAG,sBAAsB,EAA7B;AAEA,UAAA,QAAQ,GAAG,GAAA,MAAA,CAAG,IAAH,EAAO,gBAAP,EAAO,MAAP,CACf,kBAAkB,KAAA,IAAlB,IAAA,kBAAkB,KAAA,KAAA,CAAlB,GAAA,kBAAA,GAAsB,QADP,EACe,GADf,EACe,MADf,CAEb,OAFa,EAEN,GAFM,EAEN,MAFM,CAEF,kBAAkB,KAAA,IAAlB,IAAA,kBAAkB,KAAA,KAAA,CAAlB,GAAA,kBAAA,GAAsB,QAFpB,EAE4B,gBAF5B,CAAX;;;;;;AAKJ,iBAAA,CAAA;AAAA;AAAA,YAAM,UAAU,CAAC,QAAD,CAAhB,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;AACA,UAAA,iBAAiB,CAAC,QAAD,EAAW,GAAX,EAAgB,IAAhB,CAAjB;;;;;;;AAEA,UAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAgB,yBAAhB,EAA2C,CAAC,CAA5C,EAA+C,CAAC,UAAA,MAAA,CAAU,IAAV,CAAD,EAAmB,QAAnB,CAA/C;AACA,gBAAM,KAAN;;;AAII,UAAA,IAAI,GAAa,MAAM,CAAC,GAAA,MAAA,CAAG,QAAH,EAAW,MAAX,CAAD,CAAvB;AACN,iBAAA,CAAA;AAAA;AAAA,YAAM,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,GAAL,CAAS,UAAC,GAAD,EAAI;AAAK,mBAAA,UAAU,CAAC,IAAI,GAAG,GAAP,GAAX,KAAU,CAAV;AAA8B,WAAhD,CAAZ,CAAN,CAEA;AAFA,WAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA,G,CAEA;;;AACA,UAAA,MAAM,CAAC,GAAA,MAAA,CAAG,QAAH,EAAW,QAAX,CAAD,CAAN;AAII,UAAA,kBAAkB,GAAG,MAAM,CAAC,GAAA,MAAA,CAAG,QAAH,EAAW,aAAX,CAAD,CAA3B,C,CAEJ;;AACA,cAAI,kBAAkB,CAAC,WAAvB,EAAoC;AAC5B,YAAA,aAAa,GAAG;AACpB,cAAA,IAAI,EAAE,YAAA;AAAY,uBAAA,iBAAiB,CAAjB,IAAA,EAAA;AAAwB,eADtB;AAEpB,cAAA,cAAc,EAAE,YAAA,CAAc;AAFV,aAAhB;AAKN,YAAA,kBAAkB,CAAC,aAAD,CAAlB;AACA,YAAA,kBAAkB,GAAG,kBAAkB,CAAC,WAAxC;AACD;;AAEK,UAAA,WAAW,GAAG,IAAI,kBAAJ,CAAuB,QAAvB,CAAd;AACN,UAAA,WAAW,CAAC,SAAZ,GAAwB,iBAAxB;AAEA,iBAAA,CAAA;AAAA;AAAA,YAAO,WAAP,CAAA;;;;AACD;AAED,OAAM,SAAgB,iBAAhB,CACJ,IADI,EAEJ,OAFI,EAGJ,SAHI,EAGe;;;;AAEb,MAAA,IAAI,GAAG,sBAAsB,EAA7B;AACA,MAAA,QAAQ,GAAG,aAAa,CAAC,IAAD,CAAxB;AACA,MAAA,kBAAkB,GAAG,iBAAiB,CAAC,IAAD,EAAO,SAAP,CAAtC;AAEA,MAAA,QAAQ,GAAG,GAAA,MAAA,CAAG,IAAH,EAAO,gBAAP,EAAO,MAAP,CACf,kBAAkB,KAAA,IAAlB,IAAA,kBAAkB,KAAA,KAAA,CAAlB,GAAA,kBAAA,GAAsB,QADP,EACe,GADf,EACe,MADf,CAEb,OAFa,EAEN,GAFM,EAEN,MAFM,CAEF,kBAAkB,KAAA,IAAlB,IAAA,kBAAkB,KAAA,KAAA,CAAlB,GAAA,kBAAA,GAAsB,QAFpB,EAE4B,gBAF5B,CAAX;AAIN,aAAA,CAAA;AAAA;AAAA,QAAO,YAAY,CAAC,QAAD,CAAnB,CAAA;;;AACD;AAED,OAAM,SAAU,cAAV,CACJ,QADI,EACoC;;;AAExC,SACE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,QAAQ,CAAC,eAAT,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAE,QAA1B,MAAkC,IAAlC,IAAkC,EAAA,KAAA,KAAA,CAAlC,GAAkC,EAAlC,GACA,CAAA,EAAA,GAAA,QAAQ,CAAC,eAAT,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAE,OAD1B,MACiC,IADjC,IACiC,EAAA,KAAA,KAAA,CADjC,GACiC,EADjC,GAEA,QAHF;AAKD","sourcesContent":["import { Analytics } from '../../core/analytics'\nimport { LegacyIntegrationConfiguration } from '../../browser'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { Context } from '../../core/context'\nimport { User } from '../../core/user'\nimport { loadScript, unloadScript } from '../../lib/load-script'\nimport { LegacyIntegration } from './types'\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase().replace('.', '').replace(/\\s+/g, '-')\n}\n\nfunction obfuscatePathName(pathName: string, obfuscate = false): string | void {\n  return obfuscate ? btoa(pathName).replace(/=/g, '') : undefined\n}\n\nfunction recordLoadMetrics(fullPath: string, ctx: Context, name: string): void {\n  try {\n    const [metric] =\n      window?.performance?.getEntriesByName(fullPath, 'resource') ?? []\n    // we assume everything that took under 100ms is cached\n    metric &&\n      ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), [\n        name,\n        ...(metric.duration < 100 ? ['cached'] : []),\n      ])\n  } catch (_) {\n    // not available\n  }\n}\n\nexport async function loadIntegration(\n  ctx: Context,\n  analyticsInstance: Analytics,\n  name: string,\n  version: string,\n  settings?: { [key: string]: any },\n  obfuscate?: boolean\n): Promise<LegacyIntegration> {\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(pathName, obfuscate)\n  const path = getNextIntegrationsURL()\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  try {\n    await loadScript(fullPath)\n    recordLoadMetrics(fullPath, ctx, name)\n  } catch (err) {\n    ctx.stats.gauge('legacy_destination_time', -1, [`plugin:${name}`, `failed`])\n    throw err\n  }\n\n  // @ts-ignore\n  const deps: string[] = window[`${pathName}Deps`]\n  await Promise.all(deps.map((dep) => loadScript(path + dep + '.gz')))\n\n  // @ts-ignore\n  window[`${pathName}Loader`]()\n\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let integrationBuilder = window[`${pathName}Integration`] as any\n\n  // GA and Appcues use a different interface to instantiating integrations\n  if (integrationBuilder.Integration) {\n    const analyticsStub = {\n      user: (): User => analyticsInstance.user(),\n      addIntegration: (): void => {},\n    }\n\n    integrationBuilder(analyticsStub)\n    integrationBuilder = integrationBuilder.Integration\n  }\n\n  const integration = new integrationBuilder(settings) as LegacyIntegration\n  integration.analytics = analyticsInstance\n\n  return integration\n}\n\nexport async function unloadIntegration(\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<void> {\n  const path = getNextIntegrationsURL()\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(name, obfuscate)\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  return unloadScript(fullPath)\n}\n\nexport function resolveVersion(\n  settings: LegacyIntegrationConfiguration\n): string {\n  return (\n    settings.versionSettings?.override ??\n    settings.versionSettings?.version ??\n    'latest'\n  )\n}\n"]},"metadata":{},"sourceType":"module"}