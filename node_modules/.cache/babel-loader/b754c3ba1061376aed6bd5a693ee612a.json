{"ast":null,"code":"import { isThenable } from '../../lib/is-thenable';\nexport var createTaskGroup = function () {\n  var taskCompletionPromise;\n  var resolvePromise;\n  var count = 0;\n  return {\n    done: function () {\n      return taskCompletionPromise;\n    },\n    run: function (op) {\n      var returnValue = op();\n\n      if (isThenable(returnValue)) {\n        if (++count === 1) {\n          taskCompletionPromise = new Promise(function (res) {\n            return resolvePromise = res;\n          });\n        }\n\n        returnValue.finally(function () {\n          return --count === 0 && resolvePromise();\n        });\n      }\n\n      return returnValue;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/core/task/task-group.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,uBAA3B;AASA,OAAO,IAAM,eAAe,GAAG,YAAA;AAC7B,MAAI,qBAAJ;AACA,MAAI,cAAJ;AACA,MAAI,KAAK,GAAG,CAAZ;AAEA,SAAO;AACL,IAAA,IAAI,EAAE,YAAA;AAAM,aAAA,qBAAA;AAAqB,KAD5B;AAEL,IAAA,GAAG,EAAE,UAAC,EAAD,EAAG;AACN,UAAM,WAAW,GAAG,EAAE,EAAtB;;AAEA,UAAI,UAAU,CAAC,WAAD,CAAd,EAA6B;AAC3B,YAAI,EAAE,KAAF,KAAY,CAAhB,EAAmB;AACjB,UAAA,qBAAqB,GAAG,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAI;AAAK,mBAAC,cAAc,GAAf,GAAA;AAAsB,WAA3C,CAAxB;AACD;;AAED,QAAA,WAAW,CAAC,OAAZ,CAAoB,YAAA;AAAM,iBAAA,EAAE,KAAF,KAAY,CAAZ,IAAiB,cAAjB,EAAA;AAAiC,SAA3D;AACD;;AAED,aAAO,WAAP;AACD;AAdI,GAAP;AAgBD,CArBM","sourcesContent":["import { isThenable } from '../../lib/is-thenable'\n\nexport type TaskGroup = {\n  done: () => Promise<void>\n  run: <Operation extends (...args: any[]) => any>(\n    op: Operation\n  ) => ReturnType<Operation>\n}\n\nexport const createTaskGroup = (): TaskGroup => {\n  let taskCompletionPromise: Promise<void>\n  let resolvePromise: () => void\n  let count = 0\n\n  return {\n    done: () => taskCompletionPromise,\n    run: (op) => {\n      const returnValue = op()\n\n      if (isThenable(returnValue)) {\n        if (++count === 1) {\n          taskCompletionPromise = new Promise((res) => (resolvePromise = res))\n        }\n\n        returnValue.finally(() => --count === 0 && resolvePromise())\n      }\n\n      return returnValue\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}