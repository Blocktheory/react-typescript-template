{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isServer } from '../../core/environment';\nimport { loadScript } from '../../lib/load-script';\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn';\nexport function remoteMiddlewares(ctx, settings, obfuscate) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function () {\n    var path, remoteMiddleware, names, scripts, middleware;\n\n    var _this = this;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (isServer()) {\n            return [2\n            /*return*/\n            , []];\n          }\n\n          path = getNextIntegrationsURL();\n          remoteMiddleware = (_a = settings.enabledMiddleware) !== null && _a !== void 0 ? _a : {};\n          names = Object.entries(remoteMiddleware).filter(function (_a) {\n            var _ = _a[0],\n                enabled = _a[1];\n            return enabled;\n          }).map(function (_a) {\n            var name = _a[0];\n            return name;\n          });\n          scripts = names.map(function (name) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var nonNamespaced, bundleName, fullPath, error_1;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    nonNamespaced = name.replace('@segment/', '');\n                    bundleName = nonNamespaced;\n\n                    if (obfuscate) {\n                      bundleName = btoa(nonNamespaced).replace(/=/g, '');\n                    }\n\n                    fullPath = \"\".concat(path, \"/middleware/\").concat(bundleName, \"/latest/\").concat(bundleName, \".js.gz\");\n                    _a.label = 1;\n\n                  case 1:\n                    _a.trys.push([1, 3,, 4]);\n\n                    return [4\n                    /*yield*/\n                    , loadScript(fullPath) // @ts-ignore\n                    ];\n\n                  case 2:\n                    _a.sent(); // @ts-ignore\n\n\n                    return [2\n                    /*return*/\n                    , window[\"\".concat(nonNamespaced, \"Middleware\")]];\n\n                  case 3:\n                    error_1 = _a.sent();\n                    ctx.log('error', error_1);\n                    ctx.stats.increment('failed_remote_middleware');\n                    return [3\n                    /*break*/\n                    , 4];\n\n                  case 4:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          });\n          return [4\n          /*yield*/\n          , Promise.all(scripts)];\n\n        case 1:\n          middleware = _b.sent();\n          middleware = middleware.filter(Boolean);\n          return [2\n          /*return*/\n          , middleware];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/plugins/remote-middleware/index.ts"],"names":[],"mappings":";AAEA,SAAS,QAAT,QAAyB,wBAAzB;AACA,SAAS,UAAT,QAA2B,uBAA3B;AACA,SAAS,sBAAT,QAAuC,qBAAvC;AAGA,OAAM,SAAgB,iBAAhB,CACJ,GADI,EAEJ,QAFI,EAGJ,SAHI,EAGe;;;;;;;;;;;AAEnB,cAAI,QAAQ,EAAZ,EAAgB;AACd,mBAAA,CAAA;AAAA;AAAA,cAAO,EAAP,CAAA;AACD;;AACK,UAAA,IAAI,GAAG,sBAAsB,EAA7B;AACA,UAAA,gBAAgB,GAAG,CAAA,EAAA,GAAA,QAAQ,CAAC,iBAAT,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,EAA1B,GAA8B,EAAjD;AACA,UAAA,KAAK,GAAG,MAAM,CAAC,OAAP,CAAe,gBAAf,EACX,MADW,CACJ,UAAC,EAAD,EAAa;gBAAX,CAAC,GAAA,EAAA,CAAA,CAAA,C;gBAAE,OAAO,GAAA,EAAA,CAAA,CAAA,C;AAAM,mBAAA,OAAA;AAAO,WADrB,EAEX,GAFW,CAEP,UAAC,EAAD,EAAO;gBAAL,IAAI,GAAA,EAAA,CAAA,CAAA,C;AAAM,mBAAA,IAAA;AAAI,WAFT,CAAR;AAIA,UAAA,OAAO,GAAG,KAAK,CAAC,GAAN,CAAU,UAAO,IAAP,EAAW;AAAA,mBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAC7B,oBAAA,aAAa,GAAG,IAAI,CAAC,OAAL,CAAa,WAAb,EAA0B,EAA1B,CAAhB;AACF,oBAAA,UAAU,GAAG,aAAb;;AACJ,wBAAI,SAAJ,EAAe;AACb,sBAAA,UAAU,GAAG,IAAI,CAAC,aAAD,CAAJ,CAAoB,OAApB,CAA4B,IAA5B,EAAkC,EAAlC,CAAb;AACD;;AACK,oBAAA,QAAQ,GAAG,GAAA,MAAA,CAAG,IAAH,EAAO,cAAP,EAAO,MAAP,CAAsB,UAAtB,EAAgC,UAAhC,EAAgC,MAAhC,CAA2C,UAA3C,EAAqD,QAArD,CAAX;;;;;;AAGJ,2BAAA,CAAA;AAAA;AAAA,sBAAM,UAAU,CAAC,QAAD,CAAhB,CACA;AADA,qBAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA,G,CACA;;;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAO,MAAM,CAAC,GAAA,MAAA,CAAG,aAAH,EAAgB,YAAhB,CAAD,CAAb,CAAA;;;;AAEA,oBAAA,GAAG,CAAC,GAAJ,CAAQ,OAAR,EAAiB,OAAjB;AACA,oBAAA,GAAG,CAAC,KAAJ,CAAU,SAAV,CAAoB,0BAApB;;;;;;;;;;;aAdiC,CAAA;AAgBpC,WAhBe,CAAV;AAkBW,iBAAA,CAAA;AAAA;AAAA,YAAM,OAAO,CAAC,GAAR,CAAY,OAAZ,CAAN,CAAA;;;AAAb,UAAA,UAAU,GAAG,EAAA,CAAA,IAAA,EAAb;AACJ,UAAA,UAAU,GAAG,UAAU,CAAC,MAAX,CAAkB,OAAlB,CAAb;AAEA,iBAAA,CAAA;AAAA;AAAA,YAAO,UAAP,CAAA;;;;AACD","sourcesContent":["import { LegacySettings } from '../../browser'\nimport { Context } from '../../core/context'\nimport { isServer } from '../../core/environment'\nimport { loadScript } from '../../lib/load-script'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { MiddlewareFunction } from '../middleware'\n\nexport async function remoteMiddlewares(\n  ctx: Context,\n  settings: LegacySettings,\n  obfuscate?: boolean\n): Promise<MiddlewareFunction[]> {\n  if (isServer()) {\n    return []\n  }\n  const path = getNextIntegrationsURL()\n  const remoteMiddleware = settings.enabledMiddleware ?? {}\n  const names = Object.entries(remoteMiddleware)\n    .filter(([_, enabled]) => enabled)\n    .map(([name]) => name)\n\n  const scripts = names.map(async (name) => {\n    const nonNamespaced = name.replace('@segment/', '')\n    let bundleName = nonNamespaced\n    if (obfuscate) {\n      bundleName = btoa(nonNamespaced).replace(/=/g, '')\n    }\n    const fullPath = `${path}/middleware/${bundleName}/latest/${bundleName}.js.gz`\n\n    try {\n      await loadScript(fullPath)\n      // @ts-ignore\n      return window[`${nonNamespaced}Middleware`] as MiddlewareFunction\n    } catch (error: any) {\n      ctx.log('error', error)\n      ctx.stats.increment('failed_remote_middleware')\n    }\n  })\n\n  let middleware = await Promise.all(scripts)\n  middleware = middleware.filter(Boolean)\n\n  return middleware as MiddlewareFunction[]\n}\n"]},"metadata":{},"sourceType":"module"}