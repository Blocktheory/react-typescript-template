{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Emitter } from '@segment/analytics-core';\nimport { backoff } from './backoff';\n/**\n * @internal\n */\n\nexport var ON_REMOVE_FROM_FUTURE = 'onRemoveFromFuture';\n\nvar PriorityQueue =\n/** @class */\nfunction (_super) {\n  __extends(PriorityQueue, _super);\n\n  function PriorityQueue(maxAttempts, queue, seen) {\n    var _this = _super.call(this) || this;\n\n    _this.future = [];\n    _this.maxAttempts = maxAttempts;\n    _this.queue = queue;\n    _this.seen = seen !== null && seen !== void 0 ? seen : {};\n    return _this;\n  }\n\n  PriorityQueue.prototype.push = function () {\n    var _this = this;\n\n    var operations = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i] = arguments[_i];\n    }\n\n    var accepted = operations.map(function (operation) {\n      var attempts = _this.updateAttempts(operation);\n\n      if (attempts > _this.maxAttempts || _this.includes(operation)) {\n        return false;\n      }\n\n      _this.queue.push(operation);\n\n      return true;\n    });\n    this.queue = this.queue.sort(function (a, b) {\n      return _this.getAttempts(a) - _this.getAttempts(b);\n    });\n    return accepted;\n  };\n\n  PriorityQueue.prototype.pushWithBackoff = function (operation) {\n    var _this = this;\n\n    if (this.getAttempts(operation) === 0) {\n      return this.push(operation)[0];\n    }\n\n    var attempt = this.updateAttempts(operation);\n\n    if (attempt > this.maxAttempts || this.includes(operation)) {\n      return false;\n    }\n\n    var timeout = backoff({\n      attempt: attempt - 1\n    });\n    setTimeout(function () {\n      _this.queue.push(operation); // remove from future list\n\n\n      _this.future = _this.future.filter(function (f) {\n        return f.id !== operation.id;\n      }); // Lets listeners know that a 'future' message is now available in the queue\n\n      _this.emit(ON_REMOVE_FROM_FUTURE);\n    }, timeout);\n    this.future.push(operation);\n    return true;\n  };\n\n  PriorityQueue.prototype.getAttempts = function (operation) {\n    var _a;\n\n    return (_a = this.seen[operation.id]) !== null && _a !== void 0 ? _a : 0;\n  };\n\n  PriorityQueue.prototype.updateAttempts = function (operation) {\n    this.seen[operation.id] = this.getAttempts(operation) + 1;\n    return this.getAttempts(operation);\n  };\n\n  PriorityQueue.prototype.includes = function (operation) {\n    return this.queue.includes(operation) || this.future.includes(operation) || Boolean(this.queue.find(function (i) {\n      return i.id === operation.id;\n    })) || Boolean(this.future.find(function (i) {\n      return i.id === operation.id;\n    }));\n  };\n\n  PriorityQueue.prototype.pop = function () {\n    return this.queue.shift();\n  };\n\n  Object.defineProperty(PriorityQueue.prototype, \"length\", {\n    get: function () {\n      return this.queue.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PriorityQueue.prototype, \"todo\", {\n    get: function () {\n      return this.queue.length + this.future.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return PriorityQueue;\n}(Emitter);\n\nexport { PriorityQueue };","map":{"version":3,"sources":["/Users/apple/Sites/react-typescript-template/node_modules/@segment/analytics-next/src/lib/priority-queue/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Emitter } from '@segment/analytics-core'\nimport { backoff } from './backoff'\n\n/**\n * @internal\n */\nexport const ON_REMOVE_FROM_FUTURE = 'onRemoveFromFuture'\n\nexport type WithID = {\n  id: string\n}\n\nexport class PriorityQueue<T extends WithID> extends Emitter {\n  protected future: T[] = []\n  protected queue: T[]\n  protected seen: Record<string, number>\n\n  public maxAttempts: number\n\n  constructor(maxAttempts: number, queue: T[], seen?: Record<string, number>) {\n    super()\n    this.maxAttempts = maxAttempts\n    this.queue = queue\n    this.seen = seen ?? {}\n  }\n\n  push(...operations: T[]): boolean[] {\n    const accepted = operations.map((operation) => {\n      const attempts = this.updateAttempts(operation)\n\n      if (attempts > this.maxAttempts || this.includes(operation)) {\n        return false\n      }\n\n      this.queue.push(operation)\n      return true\n    })\n\n    this.queue = this.queue.sort(\n      (a, b) => this.getAttempts(a) - this.getAttempts(b)\n    )\n    return accepted\n  }\n\n  pushWithBackoff(operation: T): boolean {\n    if (this.getAttempts(operation) === 0) {\n      return this.push(operation)[0]\n    }\n\n    const attempt = this.updateAttempts(operation)\n\n    if (attempt > this.maxAttempts || this.includes(operation)) {\n      return false\n    }\n\n    const timeout = backoff({ attempt: attempt - 1 })\n\n    setTimeout(() => {\n      this.queue.push(operation)\n      // remove from future list\n      this.future = this.future.filter((f) => f.id !== operation.id)\n      // Lets listeners know that a 'future' message is now available in the queue\n      this.emit(ON_REMOVE_FROM_FUTURE)\n    }, timeout)\n\n    this.future.push(operation)\n    return true\n  }\n\n  public getAttempts(operation: T): number {\n    return this.seen[operation.id] ?? 0\n  }\n\n  public updateAttempts(operation: T): number {\n    this.seen[operation.id] = this.getAttempts(operation) + 1\n    return this.getAttempts(operation)\n  }\n\n  includes(operation: T): boolean {\n    return (\n      this.queue.includes(operation) ||\n      this.future.includes(operation) ||\n      Boolean(this.queue.find((i) => i.id === operation.id)) ||\n      Boolean(this.future.find((i) => i.id === operation.id))\n    )\n  }\n\n  pop(): T | undefined {\n    return this.queue.shift()\n  }\n\n  public get length(): number {\n    return this.queue.length\n  }\n\n  public get todo(): number {\n    return this.queue.length + this.future.length\n  }\n}\n"]},"metadata":{},"sourceType":"module"}